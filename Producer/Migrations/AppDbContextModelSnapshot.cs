// <auto-generated />
using System;
using Gkdr.Producer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gkdr.Producer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Gkdr.Producer.models.Adjudications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdOrganzation")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganzation")
                        .HasName("fk_adjudications_organizations_idx");

                    b.ToTable("adjudications");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("IdDistinct")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdDistinct")
                        .HasName("fk_region_cities_idx");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Countries", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Distinct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("IdRegion")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdRegion")
                        .HasName("fk_region_distinct_idx");

                    b.ToTable("distinct");
                });

            modelBuilder.Entity("Gkdr.Producer.models.EmployerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("DateEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdEmployer")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdOrganization")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdSpeciality")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(3)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("IdEmployer")
                        .HasName("fk_employer_history_idx");

                    b.HasIndex("IdOrganization")
                        .HasName("fk_organization_histoy_idx");

                    b.HasIndex("IdSpeciality")
                        .HasName("fk_speciality_history_idx");

                    b.ToTable("employer_history");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Employers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("Contacts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateBirth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("DateDepart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Education")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<short?>("IdCitizenship")
                        .HasColumnType("smallint(6)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int>("IdCity")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdInviteOrganization")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdOrganization")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsMissioner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Lastname")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LicecnseMesionerIssueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("LicenseMessioner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("OtherWorkplace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("PasportAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(101) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(101)
                        .IsUnicode(false);

                    b.Property<string>("PassportNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<byte[]>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longblob")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Telephone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCitizenship")
                        .HasName("fk_citizenship_employer_idx");

                    b.HasIndex("IdCity")
                        .HasName("fk_city_employer_idx");

                    b.HasIndex("IdInviteOrganization")
                        .HasName("fk_invite_organization_idx");

                    b.HasIndex("IdOrganization")
                        .HasName("fk_organization_emploer_idx");

                    b.HasIndex("IdSpeciality")
                        .HasName("fk_spec_employer_idx");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasName("UniqueId_UNIQUE");

                    b.ToTable("employers");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Lawlicences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdOrganization")
                        .HasColumnType("int(11)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<ulong>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganization")
                        .HasName("fk_lawlicenses_organization_idx");

                    b.ToTable("lawlicences");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Licences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdOrganization")
                        .HasColumnType("int(11)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<ulong>("Status")
                        .HasColumnType("bit(1)");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganization")
                        .HasName("fkorganization_license_idx");

                    b.ToTable("licences");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Logevents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<short>("Action")
                        .HasColumnType("smallint(6)");

                    b.Property<DateTime>("DateLog")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EntityType")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdEntry")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int(11)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("logevents");
                });

            modelBuilder.Entity("Gkdr.Producer.models.MissionerLicences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdEmployer")
                        .HasColumnType("int(11)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<ulong>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex("IdEmployer")
                        .HasName("fk_missioner_licences_employer_idx");

                    b.ToTable("missioner_licences");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Organizations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CertificateNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<ulong>("Forbidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("IdCity")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdDepartment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdMainOrganization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdManager")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int>("IdSubReligion")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdType")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<ulong>("IsBranch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("WebSite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCity")
                        .HasName("fk_city_orgaization_idx");

                    b.HasIndex("IdDepartment")
                        .HasName("IdDepartment");

                    b.HasIndex("IdManager")
                        .HasName("fk_manager_organization_idx");

                    b.HasIndex("IdSubReligion")
                        .HasName("fkreligionorganization_idx");

                    b.HasIndex("IdType")
                        .HasName("fkorganizationtype_idx");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Organizationtypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("organizationtypes");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Otherlicences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdOrganization")
                        .HasColumnType("int(11)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<ulong>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganization")
                        .HasName("fk_otherlicenses_organization_idx");

                    b.ToTable("otherlicences");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<short>("IdCountry")
                        .HasColumnType("smallint(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCountry")
                        .HasName("Fk_country_regions_idx");

                    b.ToTable("regions");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Religious", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("religious");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("speciality");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Subreligious", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("IdReligion")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdReligion")
                        .HasName("fksubreligious_idx");

                    b.ToTable("subreligious");
                });

            modelBuilder.Entity("Gkdr.Producer.models.UserRegions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("IdRegion")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("IdRegion")
                        .HasName("fk_region_user2_idx");

                    b.HasIndex("IdUser")
                        .HasName("fk_region_user_idx");

                    b.ToTable("user_regions");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<ulong>("Add")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int?>("IdRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<short>("IdType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasDefaultValueSql("'3'");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("login")
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<ulong>("Modify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<ulong>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("SecondName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Violations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdOrganization")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdType")
                        .HasColumnType("int(11)");

                    b.Property<string>("PersonNameViolation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdType")
                        .HasName("fkviolationtype_idx");

                    b.ToTable("violations");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Violationtypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("violationtypes");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Adjudications", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Organizations", "IdOrganzationNavigation")
                        .WithMany("Adjudications")
                        .HasForeignKey("IdOrganzation")
                        .HasConstraintName("fk_adjudications_organizations")
                        .IsRequired();
                });

            modelBuilder.Entity("Gkdr.Producer.models.Cities", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Distinct", "IdDistinctNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("IdDistinct")
                        .HasConstraintName("fkregioncity")
                        .IsRequired();
                });

            modelBuilder.Entity("Gkdr.Producer.models.Distinct", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Regions", "IdRegionNavigation")
                        .WithMany("Distinct")
                        .HasForeignKey("IdRegion")
                        .HasConstraintName("fk_region_distinct")
                        .IsRequired();
                });

            modelBuilder.Entity("Gkdr.Producer.models.EmployerHistory", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Employers", "IdEmployerNavigation")
                        .WithMany("EmployerHistory")
                        .HasForeignKey("IdEmployer")
                        .HasConstraintName("fk_employer_history")
                        .IsRequired();

                    b.HasOne("Gkdr.Producer.models.Organizations", "IdOrganizationNavigation")
                        .WithMany("EmployerHistory")
                        .HasForeignKey("IdOrganization")
                        .HasConstraintName("fk_organization_histoy")
                        .IsRequired();

                    b.HasOne("Gkdr.Producer.models.Speciality", "IdSpecialityNavigation")
                        .WithMany("EmployerHistory")
                        .HasForeignKey("IdSpeciality")
                        .HasConstraintName("fk_speciality_history");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Employers", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Countries", "IdCitizenshipNavigation")
                        .WithMany("Employers")
                        .HasForeignKey("IdCitizenship")
                        .HasConstraintName("fk_citizenship_employer");

                    b.HasOne("Gkdr.Producer.models.Cities", "IdCityNavigation")
                        .WithMany("Employers")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("fk_city_employer")
                        .IsRequired();

                    b.HasOne("Gkdr.Producer.models.Organizations", "IdInviteOrganizationNavigation")
                        .WithMany("EmployersIdInviteOrganizationNavigation")
                        .HasForeignKey("IdInviteOrganization")
                        .HasConstraintName("fk_invite_organization");

                    b.HasOne("Gkdr.Producer.models.Organizations", "IdOrganizationNavigation")
                        .WithMany("EmployersIdOrganizationNavigation")
                        .HasForeignKey("IdOrganization")
                        .HasConstraintName("fk_organization_emploer");

                    b.HasOne("Gkdr.Producer.models.Speciality", "IdSpecialityNavigation")
                        .WithMany("Employers")
                        .HasForeignKey("IdSpeciality")
                        .HasConstraintName("fk_spec_employer")
                        .IsRequired();
                });

            modelBuilder.Entity("Gkdr.Producer.models.Lawlicences", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Organizations", "IdOrganizationNavigation")
                        .WithMany("Lawlicences")
                        .HasForeignKey("IdOrganization")
                        .HasConstraintName("fk_lawlicenses_organization")
                        .IsRequired();
                });

            modelBuilder.Entity("Gkdr.Producer.models.Licences", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Organizations", "IdOrganizationNavigation")
                        .WithMany("Licences")
                        .HasForeignKey("IdOrganization")
                        .HasConstraintName("fkorganization_license")
                        .IsRequired();
                });

            modelBuilder.Entity("Gkdr.Producer.models.MissionerLicences", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Employers", "IdEmployerNavigation")
                        .WithMany("MissionerLicences")
                        .HasForeignKey("IdEmployer")
                        .HasConstraintName("fk_missioner_licences_employer")
                        .IsRequired();
                });

            modelBuilder.Entity("Gkdr.Producer.models.Organizations", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Cities", "IdCityNavigation")
                        .WithMany("Organizations")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("fkcityorganization")
                        .IsRequired();

                    b.HasOne("Gkdr.Producer.models.Employers", "IdManagerNavigation")
                        .WithMany("Organizations")
                        .HasForeignKey("IdManager")
                        .HasConstraintName("fkmanagerorganization");

                    b.HasOne("Gkdr.Producer.models.Subreligious", "IdSubReligionNavigation")
                        .WithMany("Organizations")
                        .HasForeignKey("IdSubReligion")
                        .HasConstraintName("fksubreligion")
                        .IsRequired();

                    b.HasOne("Gkdr.Producer.models.Organizationtypes", "IdTypeNavigation")
                        .WithMany("Organizations")
                        .HasForeignKey("IdType")
                        .HasConstraintName("fkorganizationtype");
                });

            modelBuilder.Entity("Gkdr.Producer.models.Otherlicences", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Organizations", "IdOrganizationNavigation")
                        .WithMany("Otherlicences")
                        .HasForeignKey("IdOrganization")
                        .HasConstraintName("fk_otherlicenses_organization")
                        .IsRequired();
                });

            modelBuilder.Entity("Gkdr.Producer.models.Subreligious", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Religious", "IdReligionNavigation")
                        .WithMany("Subreligious")
                        .HasForeignKey("IdReligion")
                        .HasConstraintName("fksubreligious")
                        .IsRequired();
                });

            modelBuilder.Entity("Gkdr.Producer.models.UserRegions", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Regions", "IdRegionNavigation")
                        .WithMany("UserRegions")
                        .HasForeignKey("IdRegion")
                        .HasConstraintName("fk_region_user2")
                        .IsRequired();

                    b.HasOne("Gkdr.Producer.models.Users", "IdUserNavigation")
                        .WithMany("UserRegions")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("fk_region_user")
                        .IsRequired();
                });

            modelBuilder.Entity("Gkdr.Producer.models.Violations", b =>
                {
                    b.HasOne("Gkdr.Producer.models.Violationtypes", "IdTypeNavigation")
                        .WithMany("Violations")
                        .HasForeignKey("IdType")
                        .HasConstraintName("fkviolationtype")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
